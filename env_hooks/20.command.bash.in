#!/bin/bash

export TUDA_WSS_COMPLETIONS=()
export TUDA_WSS_BASE_SCRIPTS=@CMAKE_INSTALL_PREFIX@/share/@PROJECT_NAME@/scripts

add_tuda_wss_completion() {
  if [ $# -ne 2 ]; then
    echo "ERROR: add_tuda_wss_completion requires exactly two arguments: command completion_function"
    echo "Passed were $# arguments: $*"
    echo "Example: add_tuda_wss_completion command _command_complete"
    return
  fi
  TUDA_WSS_COMPLETIONS+=("$1 $2")
}

# @param directory: Directory from which to search the workspace root.
#   If not provided will try to find from current working directory and if that fails from the COLCON_PREFIX_PATH
# @return The path to the workspace root or None if no workspace found
_tuda_wss_get_workspace_root() {
  if [ $# -eq 1 ]; then
    if [ -d "$1/.tuda_workspace_scripts" ] || [ -f "$1/.ros2_workspace" ]; then
      echo "$1"
      return 0
    fi
    _TMP_PARENT=$(dirname "$1")
    if [ "$_TMP_PARENT" = "$1" ]; then
      unset _TMP_PARENT
      return 1
    fi
    if _tuda_wss_get_workspace_root "$_TMP_PARENT"; then
      unset _TMP_PARENT
      return 0
    fi
    unset _TMP_PARENT
    return 1
  fi
  # No dir passed, check current dir
  if _tuda_wss_get_workspace_root "$PWD"; then
    return 0
  fi
  # Not in current dir, check colcon prefix path
  if [ -n "$COLCON_PREFIX_PATH" ] && _tuda_wss_get_workspace_root "$COLCON_PREFIX_PATH"; then
    return 0
  fi
  return 1
}

tuda_wss() {
  local command
  command="$1"
  shift

  if [[ "$command" == "help" || "$command" == "--help" || -z "$command" ]]; then
    _tuda_wss_help
    return 0
  fi

  for dir in ${TUDA_WSS_SCRIPTS//:/ }; do
    if [ -x "$dir/${command}.sh" ]; then
      $dir/${command}.sh "$@"
      return $?
    elif [ -x "$dir/${command}.bash" ]; then
      $dir/${command}.bash "$@"
      return $?
    elif [ -x "$dir/${command}.py" ]; then
      $dir/${command}.py "$@"
      return $?
    elif [ -r "$dir/${command}.sh" ]; then
      source $dir/${command}.sh "$@"
      return 0
    elif [ -r "$dir/${command}.bash" ]; then
      source $dir/${command}.bash "$@"
      return 0
    fi
  done

  if [[ "$command" == "build" ]]; then
    echo -e "\033[1;34m>>> Workspace is clean, building workspace scripts first\033[0m"
    _TMP_PWD=$PWD
    if ! cd "$(_tuda_wss_get_workspace_root)"; then
      echo -e "\033[0;31mFailed to locate workspace root\033[0m"
    fi
    colcon build --packages-select tuda_workspace_scripts
    cd "$_TMP_PWD"
    unset _TMP_PWD
    echo -e "\033[1;34m>>> Running build command again\033[0m"
    tuda_wss build "$@"
    return $?
  fi

  echo -e "\033[0;31mUnknown workspace script command: $command\033[0m"
  _tuda_wss_help
  return 1
}

_tuda_wss_commands_impl() {
  echo "help"
  echo "build"

  for dir in ${TUDA_WSS_SCRIPTS//:/ }; do
    if [ -d "$dir" ]; then
      while IFS= read -r -d '' file; do
        local command
        command=${file#$dir/}
        if [[ ${command} == _* ]]; then
          continue
        fi
        if [[ ${command} == *.py && ! -x "$file" ]]; then
          continue
        fi
        command=${command%.sh}
        command=${command%.bash}
        command=${command%.py}
        if [ -r "$file" ]; then
          echo "$command"
        fi
      done < <(find -L "$dir/" -maxdepth 1 -type f \( -name "*.bash" -o -name "*.sh" -o -name "*.py" \) -print0)
    fi
  done
}

_tuda_wss_commands() {
  _tuda_wss_commands_impl | sort | uniq
}

_tuda_wss_help() {
  echo -e "\033[1;34mThe following commands are available:\033[0m"

  local commands
  commands=$(_tuda_wss_commands)

  local out
  out=""

  for i in ${commands}; do
    for dir in ${TUDA_WSS_SCRIPTS//:/ }; do
      scripts_pkg=${dir%/scripts}
      scripts_pkg=${scripts_pkg##*/}

      if [ -x "$dir/$i.sh" ]; then
        out+="\t $i \t\t ($scripts_pkg)\n"
        break
      elif [ -x "$dir/$i.py" ]; then
        out+="\t $i \t\t ($scripts_pkg)\n"
        break
      elif [ -r "$dir/$i.sh" ]; then
        out+="* \t $i \t\t ($scripts_pkg)\n"
        break
      fi
    done
  done

  if command -v column >/dev/null 2>&1; then
    echo -e "$out" | column -s $'\t' -t
  else
    echo -e "$out"
  fi

  echo
  echo -e "\033[1;34m(*) Commands marked with * may change your environment.\033[0m"
}

function _tuda_wss_complete() {
  local cur
  local prev

  if ! type _get_comp_words_by_ref >/dev/null 2>&1; then
    return 0
  fi

  COMPREPLY=()
  _get_comp_words_by_ref cur prev

  # tuda_wss <command>
  if [ $COMP_CWORD -eq 1 ]; then
    if [[ "$cur" == -* ]]; then
      COMPREPLY=($(compgen -W '--help' -- "$cur"))
    else
      COMPREPLY=($(compgen -W "$(_tuda_wss_commands)" -- "$cur"))
    fi
  fi

  # tuda_wss command <subcommand..>
  if [ $COMP_CWORD -ge 2 ]; then
    prev=${COMP_WORDS[1]}

    # check for exported completion scripts
    for i in "${!TUDA_WSS_COMPLETIONS[@]}"; do
      if [[ "${TUDA_WSS_COMPLETIONS[i]}" == "$prev "* ]]; then
        eval ${TUDA_WSS_COMPLETIONS[$i]#$prev }
        return
      fi
    done

    # Autocomplete python scripts
    for dir in ${TUDA_WSS_SCRIPTS//:/ }; do
      if [ -d "$dir" ]; then
        while IFS= read -r -d '' file; do
          local command
          command=${file#$dir/}
          if [[ ! -x "$file" ]]; then
            continue
          fi
          command=${command%.py}
          if [[ "$command" != "$prev" ]]; then
            continue
          fi

          if ! which register-python-argcomplete > /dev/null 2>&1 && !  which register-python-argcomplete3 > /dev/null 2>&1; then
            echo ""
            echo -e "\033[1;34mFor autocompletion please install argcomplete using 'pip3 install --user argcomplete'\033[0m"
          fi
          local IFS=$'\013'
          local SUPPRESS_SPACE=0
          if compopt +o nospace 2> /dev/null; then
            SUPPRESS_SPACE=1
          fi
          COMP_LINE=${COMP_LINE#${COMP_WORDS[0]} } # Remove prefix and space
          (( COMP_POINT -= ${#COMP_WORDS[0]} + 1 ))
          COMPREPLY=( $(IFS="$IFS" \
                        COMP_LINE="$COMP_LINE" \
                        COMP_POINT="$COMP_POINT" \
                        COMP_TYPE="$COMP_TYPE" \
                        _ARGCOMPLETE_COMP_WORDBREAKS="$COMP_WORDBREAKS" \
                        _ARGCOMPLETE=1 \
                        _ARGCOMPLETE_SUPPRESS_SPACE=$SUPPRESS_SPACE \
                        $file 8>&1 9>&2 > /dev/null 2>&1) )
          if [[ $? != 0 ]]; then
            unset COMPREPLY
          elif [[ $SUPPRESS_SPACE == 1 ]] && [[ "$COMPREPLY" =~ [=/:]$ ]]; then
            compopt -o nospace
          fi
          return
        done < <(find -L "$dir/" -maxdepth 1 -type f -name "*.py" -print0)
      fi
    done
  fi
}

complete -F _tuda_wss_complete tuda_wss

if [ -n "$TUDA_WSS_PREFIX" ] && [ "$TUDA_WSS_PREFIX" != "tuda_wss" ]; then
  alias $TUDA_WSS_PREFIX=tuda_wss
  complete -F _tuda_wss_complete TUDA_WSS_PREFIX
fi

# Load completions
for file in `find -L $TUDA_WSS_BASE_SCRIPTS/autocompletion/ -maxdepth 1 -type f -name "*.bash"`; do
  source $file
done
